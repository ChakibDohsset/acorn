#!/usr/bin/env node

var path = require("path");
var fs = require("fs");
var acorn = require("../acorn.js");

var infile, parsed, options = {}, silent = false, compact = false;

function help(status) {
  console.log("usage: " + path.basename(process.argv[1]) + " [options] file\n");
  console.log("Parses <file> and outputs the parsed AST as a stringified JSON object.\n");
  console.log("Options:");
  console.log("--ecma3|--ecma5     Sets the ECMAScript version to parse. Default is version 5.");
  console.log("--strictSemicolons  Prevents the parser from doing automatic semicolon insertion.");
  console.log("                    Statements that do not end in semicolons will generate an error.");
  console.log("--trackComments     Attaches an array of comments found before and after each expression node.");
  console.log("--trackSpaces       Attaches an array of whitespaces found before and after each expression node.");
  console.log("--locations         Attaches a \"loc\" object to each node with \"start\" and \"end\" subobjects,");
  console.log("                    each of which contains the one-based line and zero-based column numbers.");
  console.log("-Dmacro[([param, ...])][=definition]]");
  console.log("                    Defines a macro. A name with no parameters and no definition will be defined");
  console.log("                    with the value 1. To be safe from shell expansion, the values on either side");
  console.log("                    of the = should be enclosed in '', for example -D'PLUS_ONE(arg)'='arg + 1'.");
  console.log("                    May be used multiple times to define multiple macros.");
  console.log("--no-objj           Turns off Objective-J syntax parsing.");
  console.log("--no-preprocess     Turns off the preprocessor. Results in ~30% speed increase.");
  console.log("--compact           No whitespace is used in the AST output.");
  console.log("--silent            Do not output the AST, just return the exit status.");
  console.log("--help              Print this usage information and quit.");
  process.exit(status);
}

for (var i = 2; i < process.argv.length; ++i) {
  var arg = process.argv[i];
  if (arg == "--ecma3") options.ecmaVersion = 3;
  else if (arg == "--ecma5") options.ecmaVersion = 5;
  else if (arg == "--strictSemicolons") options.strictSemicolons = true;
  else if (arg == "--trackComments") options.trackComments = true;
  else if (arg == "--trackSpaces") options.trackSpaces = true;
  else if (arg == "--locations") options.locations = true;
  else if (arg.slice(0, 2) == "-D") (options.macros || (options.macros = [])).push(arg.slice(2));
  else if (arg == "--no-preprocess") options.preprocess = false;
  else if (arg == "--no-objj") options.objj = false;
  else if (arg == "--silent") silent = true;
  else if (arg == "--compact") compact = true;
  else if (arg == "--help") help(0);
  else if (arg[0] == "-") help(1);
  else infile = arg;
}

if (!infile) help(1);

try {
  options.sourceFile = path.resolve(infile);
  var code = fs.readFileSync(infile, "utf8");
  parsed = acorn.parse(code, options);
} catch(e) {
  console.log(e.message);
  process.exit(1);
}

if (!silent)
  console.log(JSON.stringify(parsed, null, compact ? null : 2));
